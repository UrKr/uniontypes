{:rename-macros {}, :renames {}, :use-macros {with-instrument-disabled cljs.spec.test}, :excludes #{}, :name cljs.spec.test, :imports nil, :requires {goog.userAgent.product goog.userAgent.product, cljs.stacktrace cljs.stacktrace, gobj goog.object, stc clojure.test.check, goog.object goog.object, gen cljs.spec.impl.gen, pp cljs.pprint, clojure.test.check clojure.test.check, cljs.pprint cljs.pprint, cljs.spec.impl.gen cljs.spec.impl.gen, s cljs.spec, string clojure.string, clojure.test.check.properties clojure.test.check.properties, product goog.userAgent.product, clojure.string clojure.string, st cljs.stacktrace, cljs.spec cljs.spec}, :uses nil, :defs {failure-type {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 236, :column 8, :end-line 236, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.test/failure-type, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, get-env {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 60, :column 7, :end-line 60, :end-column 14, :arglists (quote ([]))}, :name cljs.spec.test/get-env, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, instrument-choose-fn {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 125, :column 8, :end-line 125, :end-column 28, :private true, :arglists (quote ([f spec sym {over :gen, :keys [stub replace]}])), :doc "Helper for instrument."}, :private true, :name cljs.spec.test/instrument-choose-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 28, :method-params ([f spec sym p__12530]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 4, :fn-var true, :arglists (quote ([f spec sym {over :gen, :keys [stub replace]}])), :doc "Helper for instrument."}, explain-data* {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 69, :column 8, :end-line 69, :end-column 21, :private true, :arglists (quote ([spec v]))}, :private true, :name cljs.spec.test/explain-data*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([spec v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec v]))}, explain-check {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 182, :column 8, :end-line 182, :end-column 21, :private true, :arglists (quote ([args spec v role]))}, :private true, :name cljs.spec.test/explain-check, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([args spec v role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 4, :fn-var true, :arglists (quote ([args spec v role]))}, distinct-by {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([f coll]))}, :name cljs.spec.test/distinct-by, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 18, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll]))}, *instrument-enabled* {:meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 41, :column 26, :end-line 41, :end-column 46, :dynamic true, :private true}, :private true, :name cljs.spec.test/*instrument-enabled*, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 46, :column 1, :dynamic true, :line 41, :end-line 41, :doc "if false, instrumented fns call straight through"}, collectionize {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 163, :column 8, :end-line 163, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.test/collectionize, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, instrumented-vars {:name cljs.spec.test/instrumented-vars, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :line 123, :column 1, :end-line 123, :end-column 37, :private true, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 123, :column 20, :end-line 123, :end-column 37, :private true}}, summarize-results {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 269, :column 7, :end-line 269, :end-column 24, :arglists (quote ([check-results] [check-results summary-result])), :doc "Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([check-results] [check-results summary-result]), :arglists ([check-results] [check-results summary-result]), :arglists-meta (nil nil)}}, :name cljs.spec.test/summarize-results, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([check-results] [check-results summary-result]), :arglists ([check-results] [check-results summary-result]), :arglists-meta (nil nil)}, :method-params ([check-results] [check-results summary-result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists ([check-results] [check-results summary-result]), :doc "Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result."}, instrumentable-syms {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 169, :column 7, :end-line 169, :end-column 26, :arglists (quote ([] [opts])), :doc "Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name cljs.spec.test/instrumentable-syms, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Given an opts map as per instrument, returns the set of syms\nthat can be instrumented."}, get-host-port {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([]))}, :name cljs.spec.test/get-host-port, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, spec-checking-fn {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 87, :column 8, :end-line 87, :end-column 24, :private true, :arglists (quote ([v f fn-spec]))}, :private true, :name cljs.spec.test/spec-checking-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 24, :method-params ([v f fn-spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 3, :fn-var true, :arglists (quote ([v f fn-spec]))}, get-ua-product {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([]))}, :name cljs.spec.test/get-ua-product, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, unwrap-failure {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 240, :column 8, :end-line 240, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.test/unwrap-failure, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, fn-spec-name? {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 159, :column 8, :end-line 159, :end-column 21, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec.test/fn-spec-name?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ->sym {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 35, :column 7, :end-line 35, :end-column 12, :arglists (quote ([x]))}, :name cljs.spec.test/->sym, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, instrument-1* {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 137, :column 8, :end-line 137, :end-column 21, :private true, :arglists (quote ([s v opts]))}, :private true, :name cljs.spec.test/instrument-1*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([s v opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s v opts]))}, quick-check {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 209, :column 8, :end-line 209, :end-column 19, :private true, :arglists (quote ([f specs {gen :gen, opts :clojure.test.check/opts}]))}, :private true, :name cljs.spec.test/quick-check, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 19, :method-params ([f specs p__12556]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs {gen :gen, opts :clojure.test.check/opts}]))}, instrument-choose-spec {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 132, :column 8, :end-line 132, :end-column 30, :private true, :arglists (quote ([spec sym {overrides :spec}])), :doc "Helper for instrument"}, :private true, :name cljs.spec.test/instrument-choose-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 30, :method-params ([spec sym p__12535]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec sym {overrides :spec}])), :doc "Helper for instrument"}, find-caller {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 74, :column 8, :end-line 74, :end-column 19, :private true, :arglists (quote ([st]))}, :private true, :name cljs.spec.test/find-caller, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 19, :method-params ([st]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([st]))}, check-call {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 192, :column 8, :end-line 192, :end-column 18, :private true, :arglists (quote ([f specs args])), :doc "Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure."}, :private true, :name cljs.spec.test/check-call, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 18, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args])), :doc "Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure."}, fn-spec? {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 63, :column 8, :end-line 63, :end-column 16, :private true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, :private true, :name cljs.spec.test/fn-spec?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, no-fspec {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 118, :column 8, :end-line 118, :end-column 16, :private true, :arglists (quote ([v spec]))}, :private true, :name cljs.spec.test/no-fspec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 16, :method-params ([v spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v spec]))}, unstrument-1* {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 150, :column 8, :end-line 150, :end-column 21, :private true, :arglists (quote ([s v]))}, :private true, :name cljs.spec.test/unstrument-1*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 21, :method-params ([s v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s v]))}, make-check-result {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 218, :column 8, :end-line 218, :end-column 25, :private true, :arglists (quote ([check-sym spec test-check-ret])), :doc "Builds spec result map."}, :private true, :name cljs.spec.test/make-check-result, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 25, :method-params ([check-sym spec test-check-ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 3, :fn-var true, :arglists (quote ([check-sym spec test-check-ret])), :doc "Builds spec result map."}, result-type {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 246, :column 8, :end-line 246, :end-column 19, :private true, :arglists (quote ([ret])), :doc "Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception"}, :private true, :name cljs.spec.test/result-type, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 19, :method-params ([ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ret])), :doc "Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception"}, abbrev-result {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 259, :column 7, :end-line 259, :end-column 20, :arglists (quote ([x])), :doc "Given a check result, returns an abbreviated version\nsuitable for summary use."}, :name cljs.spec.test/abbrev-result, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Given a check result, returns an abbreviated version\nsuitable for summary use."}, validate-check-opts {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/resources/public/js/compiled/out/cljs/spec/test.cljs", :line 230, :column 8, :end-line 230, :end-column 27, :private true, :arglists (quote ([opts]))}, :private true, :name cljs.spec.test/validate-check-opts, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/test.cljs", :end-column 27, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}}, :require-macros {m cljs.spec.test, cljs.spec.test cljs.spec.test, pp cljs.pprint, cljs.pprint cljs.pprint, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{:args x :cljs.spec/invalid :ret :ua-product :shrunk :fn :check-passed :instrument :cljs.spec.test/val :safari :private :else :gen :replace :failure :cljs.spec/args cljs.spec/->sym :raw :default :ns :name :cljs.spec.test/args :file :num-tests :end-column :clojure.test.check/opts :port ->sym :function :stub :sym :column spec-or-k :firefox :clojure.test.check/ret :cljs.spec/failure :spec cljs.spec/maybe-spec :host :total :no-fspec :line :chrome :var :result :ie :check-failed :end-line maybe-spec :cljs.spec.test/caller :arglists :doc :wrapped :check-threw :test cljs.spec}, :order [cljs.spec/->sym :private :ns :name :file :end-column :column :line :end-line :arglists :doc :test cljs.spec ->sym x :host :port :safari :chrome :firefox :ie :ua-product :args :ret :function cljs.spec/maybe-spec maybe-spec spec-or-k :cljs.spec/invalid :cljs.spec/args :cljs.spec/failure :instrument :cljs.spec.test/caller :var :spec :no-fspec :gen :stub :replace :raw :wrapped :cljs.spec.test/args :cljs.spec.test/val :check-failed :fn :clojure.test.check/opts :num-tests :else :result :clojure.test.check/ret :sym :failure :shrunk :check-passed :default :check-threw :total]}, :doc nil}
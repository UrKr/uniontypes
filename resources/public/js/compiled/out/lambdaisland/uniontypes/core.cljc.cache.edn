{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name lambdaisland.uniontypes.core, :imports nil, :requires {s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec, st cljs.spec.test, cljs.spec.test cljs.spec.test, clojure.spec.test cljs.spec.test}, :uses nil, :defs {select-branches {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :line 14, :column 8, :end-line 14, :end-column 23, :private true, :arglists (quote ([branches]))}, :private true, :name lambdaisland.uniontypes.core/select-branches, :variadic false, :file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :end-column 23, :method-params ([branches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([branches]))}, select-invalid {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :line 17, :column 8, :end-line 17, :end-column 22, :private true, :arglists (quote ([branches]))}, :private true, :name lambdaisland.uniontypes.core/select-invalid, :variadic false, :file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :end-column 22, :method-params ([branches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([branches]))}, explain-invalid {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :line 20, :column 8, :end-line 20, :end-column 23, :private true, :arglists (quote ([spec val]))}, :private true, :name lambdaisland.uniontypes.core/explain-invalid, :variadic false, :file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :end-column 23, :method-params ([spec val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec val]))}, case-of-impl {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :line 26, :column 8, :end-line 26, :end-column 20, :private true, :arglists (quote ([spec val branches]))}, :private true, :name lambdaisland.uniontypes.core/case-of-impl, :variadic false, :file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :end-column 20, :method-params ([spec val branches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([spec val branches]))}, case-of {:protocol-inline nil, :meta {:file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :line 44, :column 11, :end-line 44, :end-column 18, :macro true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name lambdaisland.uniontypes.core/case-of, :variadic true, :file "/home/arne/clj-projects/uniontypes/src/lambdaisland/uniontypes/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :macro true, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:args :cljs.spec/invalid cljs.core/keyword? cljs.core/= s/or cljs.spec/conform :name :or conformed__8706__auto__ cljs.core/qualified-keyword? :branches :val :invalid _ :lambdaisland.uniontypes.core/or-spec-desc if branch__8707__auto__ or cljs.core/let :spec :binding :lambdaisland.uniontypes.core/case-of-args s/+ cljs.core/ex-info :cases lambdaisland.uniontypes.core/explain-invalid quote cljs.core/symbol? :branch :body cljs.spec/fspec s/cat cljs.core/case cljs.spec/explain-data s/* lambdaisland.uniontypes.core/case-of cljs.core/or throw cljs.core/any? :spec-obj}, :order [:lambdaisland.uniontypes.core/or-spec-desc s/cat :or quote cljs.core/or :cases s/+ :name cljs.core/keyword? :spec cljs.core/any? or :lambdaisland.uniontypes.core/case-of-args cljs.core/qualified-keyword? :val :branches s/or :branch cljs.core/symbol? :binding :body s/* :invalid _ throw cljs.core/ex-info lambdaisland.uniontypes.core/explain-invalid cljs.core/let conformed__8706__auto__ cljs.spec/conform if cljs.core/= :cljs.spec/invalid cljs.spec/explain-data branch__8707__auto__ cljs.core/case :spec-obj lambdaisland.uniontypes.core/case-of cljs.spec/fspec :args]}, :doc nil}